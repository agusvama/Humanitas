user: humano
pass: humano
#auto generando archivos para el servidor
$ django-admin.py startproject nombre_sitio
#esto nos va generar una carpeta nombre_sitio y dentro un manage.py

#iniciando el servidor
$ python manage.py runserver

#configurando la base de datos
#abrir dentro de nombre_sitio, settings.py
#por default va trabajar con sqlite3, que es ligero y viene incluido
#con python, si no se quiere otro motor dejar como está

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

#crear las tablas de la base de datos de acuerdo a
#INSTALLED_APPS
$ python manage.py syncdb
#lanzará un mensaje para crear un nuevo superusuario
#que se utilizará en /admin

#ahora toca crear una app para considerarla dentro de la base de datos
$ python manage.py startapp nombre_app
#luego agregarlo a INSTALLED_APPS
#dentro de settings.py
#agregar a la base de datos de nuevo con:
$ python manage.py syncdb
#luego hacer modificable la nueva app dentro de admin
#en el archivo nombre_app/admin.py

7/dic/2015 -> revisando el curso en youtube de django, me entero que:
#toda app debe tener su carpeta propia de templates, dentro de una carpeta
#general templates

#el archivo urls.py contiene expresiones regulares
^ denota el principio del texto
$ denota el final del texto
\d representa un dígito
+ indica que el ítem anterior debería ser repetido <strong>por lo menos</strong> una vez
() para encerrar una parte del patrón

IMPORTANTE APRENDIDO HOY:
#para llamar al html dentro de views.py, se usan rutas, es decir project/templates/app/archivo.html
#en cambio para llamar a la vista, se utilizan puntos, se importan: app.vista
##porque las vistas son declaradas en métodos, las templates son archivos

LAS VIEWS....
conectaN modelos con plantillas

7/dic/ en taller de investigacion
Ahora sabemos como agregar un destino a un botón, comienza a darle forma

<!--button class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent" id="add"-->
<!--i class="material-icons" role="presentation">add</i-->
<!--span class="visuallyhidden">Add</span-->
<!--/button-->


#agregar un nuevo registro desde la consola:
$ python manage.py shell
$ from escuela.models import <ClassName>
$ nuevo = Class(attrib=value, attrib=value, ... atrib=value)
